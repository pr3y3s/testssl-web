from flask import Flask, render_template, request
from datetime import datetime
import os
import subprocess
import tempfile
import csv
import glob
import sqlite3

app = Flask(__name__)

# Constants
CERT_TERMS = [
    "cert_fingerprintSHA256",
    "cert_chain_of_trust",
    "cert_notAfter",
    "cert_caIssuers"
]

def load_mapping(filename):
    """
    Loads the ciphersuite mapping from a text file.

    Args:
        filename (str): The name of the file containing the mapping.

    Returns:
        dict: A dictionary with the ciphersuite mappings.
    """
    mapping = {}
    with open(filename, 'r') as file:
        for line in file:
            key, value = line.strip().split()
            mapping[key] = value
    return mapping

def find_file(url):
    """
    Finds the CSV file generated by testssl.

    Args:
        url (str): The URL of the analyzed website.

    Returns:
        str: The name of the first CSV file found.
    """
    if url.startswith("https://"):
        url = url.removeprefix("https://")
    found_files = glob.glob(f"{url}*.csv")
    return found_files[0] if found_files else None

def execute_testssl(url, option):
    """
    Executes testssl with the specified URL and option.

    Args:
        url (str): The URL of the website to analyze.
        option (str): The analysis option.
    """

        # Comando testssl
        if option in ['stic221', 'stic807']:
            # Ejecutamos el comando testssl y redirigimos la salida al archivo temporal
            subprocess.run(f"testssl --csv --mapping iana -E -f {url} > 2>&1", shell=True)
        else:
            subprocess.run(f"testssl --csv -S {url} > 2>&1", shell=True)

def find_file(url):
    """
    Finds the CSV file generated by testssl.

    Args:
        url (str): The URL of the analyzed website.

    Returns:
        str: The name of the first CSV file found.
    """
    if url.startswith("https://"):
        url = url.removeprefix("https://")
    found_files = glob.glob(f"{url}*.csv")
    return found_files[0] if found_files else None

def extract_ciphersuite(elements):
    """
    Extracts the ciphersuite from a CSV line.

    Args:
        elements (str): The CSV line.

    Returns:
        str: The extracted ciphersuite.
    """
    return elements.split()[2]

def extract_curve(elements):
    """
    Extracts the curve from a CSV line.

    Args:
        elements (str): The CSV line.

    Returns:
        str: The extracted curve.
    """
    return elements.split()[1]

def csv_analysis(file, analysis_option):
    """
    Analyzes the CSV file and extracts ciphersuites and curves.

    Args:
        file (str): The name of the CSV file.
        analysis_option (str): The analysis option.

    Returns:
        tuple: A tuple containing the analysis results.
    """
    # Initialize lists for each analysis
    ciphersuites_tls_10 = []
    ciphersuites_tls_11 = []
    ciphersuites_tls_12 = []
    ciphersuites_tls_13 = []
    curves = []
    certificate = []
    control_certificate = False

    if analysis_option == "completo":
        with open(file, newline='') as csvfile:
            reader = csv.reader(csvfile)
            for row in reader:
                if "cert_signatureAlgorithm" in row[0]:
                    signature_algorithm = row[4]
                elif "cert_keySize" in row[0]:
                    key_size = row[4]
                elif "cert_fingerprintSHA256" in row[0]:
                    fingerprint_sha256 = row[4]
                elif "cert_chain_of_trust" in row[0]:
                    chain_verf = row[4]
                elif "cert_notAfter" in row[0]:
                    expiration_date = row[4]

        certificate.extend([signature_algorithm, key_size, fingerprint_sha256, chain_verf, expiration_date])
        cleanup_files()
        return certificate
    else:
        with open(file, newline='') as csvfile:
            reader = csv.reader(csvfile)
            for row in reader:
                if "cipher-tls1_x" in row[0]:
                    ciphersuites_tls_10.append(row[4])
                elif "cipher-tls1_1_" in row[0]:
                    ciphersuites_tls_11.append(row[4])
                elif "cipher-tls1_2_" in row[0]:
                    ciphersuites_tls_12.append(row[4])
                elif "cipher-tls1_3_" in row[0]:
                    ciphersuites_tls_13.append((row[4], extract_curve(row[4])))
                elif any(term in row[0] for term in CERT_TERMS) and control_certificate:
                    certificate.append(row[4])
                    if "cert_caIssuers" in row[0]:
                        control_certificate = False
                if "FS_ECDHE_curves" in row[0]:
                    curves.append(row[4])

        cleanup_files()
        filtered_10 = filter_tls_elements(ciphersuites_tls_10, 10)
        filtered_11 = filter_tls_elements(ciphersuites_tls_11, 1)
        filtered_12 = filter_tls_elements(ciphersuites_tls_12, 2)
        filtered_13 = filter_tls_elements(ciphersuites_tls_13, 3)
        filtered_curves = filter_curves(curves)

        validated_12, deprecated_12, validated_13, deprecated_13, validated_curves, deprecated_curves = sql_extract(filtered_12, filtered_13, filtered_curves, analysis_option)
        return filtered_10, filtered_11, validated_12, deprecated_12, validated_13, deprecated_13, validated_curves

def sql_extract(ciphersuites12, ciphersuites13, curves, analysis_option):
    """
    Extracts validated ciphersuites and their recommendations from the database.

    Args:
        ciphersuites12 (list): List of TLS 1.2 ciphersuites to validate.
        ciphersuites13 (list): List of TLS 1.3 ciphersuites to validate.
        curves (list): List of curves to validate.
        analysis_option (str): The analysis option.

    Returns:
        tuple: A tuple containing validated and deprecated ciphersuites and curves.
    """
    validated_ciphersuites12 = []
    deprecated_ciphersuites12 = []
    validated_ciphersuites13 = []
    deprecated_ciphersuites13 = []
    validated_curves = []
    deprecated_curves = []

    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()

    if analysis_option == "stic221":
        cursor.execute("SELECT ciphersuite, ccn_stic_221_recommendation FROM ciphersuites WHERE version = 'TLS1.2'")
        ccn_ciphers_12 = {row[0]: row[1] for row in cursor.fetchall()}
        cursor.execute("SELECT ciphersuite, ccn_stic_221_recommendation FROM ciphersuites WHERE version = 'TLS1.3'")
        ccn_ciphers_13 = {row[0]: row[1] for row in cursor.fetchall()}
        cursor.execute("SELECT curve, recommendation FROM curves WHERE version = 'TLS1.2'")
        ccn_curves = {row[0]: row[1] for row in cursor.fetchall()}
    elif analysis_option == "stic807":
        cursor.execute("SELECT ciphersuite, ccn_stic_807_recommendation FROM ciphersuites WHERE version = 'TLS1.2'")
        ccn_ciphers_12 = {row[0]: row[1] for row in cursor.fetchall()}
        cursor.execute("SELECT ciphersuite, ccn_stic_807_recommendation FROM ciphersuites WHERE version = 'TLS1.3'")
        ccn_ciphers_13 = {row[0]: row[1] for row in cursor.fetchall()}

    for suite in ciphersuites12:
        if suite in ccn_ciphers_12:
            validated_ciphersuites12.append((suite, ccn_ciphers_12[suite]))
        else:
            deprecated_ciphersuites12.append(suite)

    for suite in ciphersuites13:
        if suite in ccn_ciphers_13:
            validated_ciphersuites13.append((suite, ccn_ciphers_13[suite]))
        else:
            deprecated_ciphersuites13.append(suite)

    for curve in curves:
        if curve in ccn_curves:
            validated_curves.append((curve, ccn_curves[curve]))
        else:
            deprecated_curves.append(curve)

    cursor.close()
    conn.close()
    return validated_ciphersuites12, deprecated_ciphersuites12, validated_ciphersuites13, deprecated_ciphersuites13, validated_curves, deprecated_curves

def filter_curves(curves):
    """
    Filters and normalizes the curves.

    Args:
        curves (list): List of curves to filter.

    Returns:
        list: List of filtered and normalized curves.
    """
    mapping = {
        "prime256v1": "secp256r1",
        "X25519": "x25519",
        "X448": "x448"
    }
    cleaned_curves = []
    for item in curves:
        curves_list = item.split()[4]
        normalized_curves = [mapping.get(curve, curve) for curve in curves_list]
        cleaned_curves.extend(normalized_curves)
    return cleaned_curves

def filter_tls_elements(tuples_list, version_token):
    """
    Filters and returns only the elements that start with 'TLS_'.

    Args:
        tuples_list (list): List of tuples containing ciphersuites and other data.
        version_token (int): The token for the TLS version.

    Returns:
        list: List of filtered elements.
    """
    cleaned_list = []
    for item in tuples_list:
        ciphersuite = item.split()[3] if version_token != 3 else item[0].split()[3]
        cleaned_list.append(ciphersuite)
    return cleaned_list

def cleanup_files():
    """
    Cleans up CSV files after analysis.
    """
    for archivo in os.listdir():
        if archivo.endswith(".csv"):
            os.remove(archivo)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/perform_test', methods=['POST'])
def perform_test():
    url_to_analyze = request.form['url']
    analysis_option = request.form['analysis_option']

    execute_testssl(url_to_analyze, analysis_option)
    csv_file = find_file(url_to_analyze)

    if csv_file:
        if analysis_option == 'completo':
            certificate_analysis = csv_analysis(csv_file, analysis_option)
            return render_template('result.html', url=url_to_analyze, certificate_analysis=certificate_analysis)
        elif analysis_option in ['stic221', 'stic807']:
            tls_10_filtered, tls_11_filtered, tls_12_validated, tls_12_deprecated, tls_13_validated, tls_13_deprecated, curves_validated, curves_deprecated = csv_analysis(csv_file, analysis_option)
            template = 'result_stic221.html' if analysis_option == 'stic221' else 'result_stic807.html'
            return render_template(template, url=url_to_analyze,
                                   tls_10_filtered=tls_10_filtered, tls_11_filtered=tls_11_filtered,
                                   tls_12_validated=tls_12_validated, tls_12_deprecated=tls_12_deprecated,
                                   tls_13_validated=tls_13_validated, tls_13_deprecated=tls_13_deprecated,
                                   curves_validated=curves_validated, curves_deprecated=curves_deprecated, timestamp=datetime.now())
    else:
        return f"No se encontró ningún archivo CSV para la URL: {url_to_analyze}"

if __name__ == '__main__':
    port = int(os.environ.get('PORT',5000))
    app.run(host="0.0.0.0", port=port, debug=True)
